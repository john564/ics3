diff -rupN openvpn/src/openvpn/forward.c openvpn2.3.0/src/openvpn/forward.c
--- openvpn/src/openvpn/forward.c	2012-12-13 15:46:01.000000000 +0000
+++ openvpn-2.3.0/src/openvpn/forward.c	2013-03-22 15:01:58.556296000 +0000
@@ -674,7 +674,10 @@ read_incoming_link (struct context *c)
   status = link_socket_read (c->c2.link_socket,
 			     &c->c2.buf,
 			     MAX_RW_SIZE_LINK (&c->c2.frame),
-			     &c->c2.from);
+			     &c->c2.from,
+				c->options.ce.xormethod,
+				c->options.ce.xormask,
+				c->options.ce.xormasklen);
 
   if (socket_connection_reset (c->c2.link_socket, status))
     {
@@ -1141,7 +1144,10 @@ process_outgoing_link (struct context *c
 	    /* Send packet */
 	    size = link_socket_write (c->c2.link_socket,
 				      &c->c2.to_link,
-				      to_addr);
+				      to_addr,
+					c->options.ce.xormethod,
+					c->options.ce.xormask,
+					c->options.ce.xormasklen);
 
 #ifdef ENABLE_SOCKS
 	    /* Undo effect of prepend */
diff -rupN openvpn/src/openvpn/options.c openvpn2.3.0/src/openvpn/options.c
--- openvpn/src/openvpn/options.c	2012-12-17 09:36:07.000000000 +0000
+++ openvpn-2.3.0/src/openvpn/options.c	2013-03-22 15:00:12.172953000 +0000
@@ -784,6 +784,9 @@ init_options (struct options *o, const b
   o->max_routes = MAX_ROUTES_DEFAULT;
   o->resolve_retry_seconds = RESOLV_RETRY_INFINITE;
   o->proto_force = -1;
+  o->ce.xormethod = 0;
+  o->ce.xormask ="\0";
+  o->ce.xormasklen = 1;
 #ifdef ENABLE_OCC
   o->occ = true;
 #endif
@@ -902,6 +905,9 @@ setenv_connection_entry (struct env_set
   setenv_int_i (es, "local_port", e->local_port, i);
   setenv_str_i (es, "remote", e->remote, i);
   setenv_int_i (es, "remote_port", e->remote_port, i);
+  setenv_int_i (es, "xormethod", e->xormethod, i);
+  setenv_str_i (es, "xormask", e->xormask, i);
+  setenv_int_i (es, "xormasklen", e->xormasklen, i);
 
 #ifdef ENABLE_HTTP_PROXY
   if (e->http_proxy_options)
@@ -1347,6 +1353,9 @@ show_connection_entry (const struct conn
   SHOW_INT (connect_retry_seconds);
   SHOW_INT (connect_timeout);
   SHOW_INT (connect_retry_max);
+  SHOW_INT (xormethod);
+  SHOW_STR (xormask);
+  SHOW_INT (xormasklen);
 
 #ifdef ENABLE_HTTP_PROXY
   if (o->http_proxy_options)
@@ -4911,6 +4920,35 @@ add_option (struct options *options,
       options->proto_force = proto_force;
       options->force_connection_list = true;
     }
+  else if (streq (p[0], "scramble"))
+    {
+      VERIFY_PERMISSION (OPT_P_GENERAL|OPT_P_CONNECTION);
+	if (streq (p[1], "xormask"))
+	{
+	  options->ce.xormethod = 1;
+	  options->ce.xormask = p[2];
+	  options->ce.xormasklen = strlen(options->ce.xormask);
+	}
+	else if (streq (p[1], "xorptrpos"))
+	{
+	  options->ce.xormethod=2;
+	}
+	else if (streq (p[1], "reverse"))
+	{
+	  options->ce.xormethod=3;
+	}
+	else if (streq (p[1], "obfuscate"))
+	{
+	  options->ce.xormethod=4;
+	  options->ce.xormask = p[2];
+	  options->ce.xormasklen = strlen(options->ce.xormask);
+	}
+	else
+	{
+	  options->ce.xormask = p[1];
+	  options->ce.xormasklen = strlen(options->ce.xormask);
+	}
+    }
 #ifdef ENABLE_HTTP_PROXY
   else if (streq (p[0], "http-proxy") && p[1])
     {
diff -rupN openvpn/src/openvpn/options.h openvpn2.3.0/src/openvpn/options.h
--- openvpn/src/openvpn/options.h	2012-11-22 12:07:50.000000000 +0000
+++ openvpn-2.3.0/src/openvpn/options.h	2013-03-22 14:55:27.514034000 +0000
@@ -100,6 +100,9 @@ struct connection_entry
   int connect_retry_max;
   int connect_timeout;
   bool connect_timeout_defined;
+  int xormethod;
+  const char *xormask;
+  int xormasklen;
 #ifdef ENABLE_HTTP_PROXY
   struct http_proxy_options *http_proxy_options;
 #endif  
diff -rupN openvpn/src/openvpn/socket.c openvpn2.3.0/src/openvpn/socket.c
--- openvpn/src/openvpn/socket.c	2012-12-13 15:46:01.000000000 +0000
+++ openvpn-2.3.0/src/openvpn/socket.c	2013-03-22 15:11:44.726188000 +0000
@@ -52,6 +52,39 @@ const int proto_overhead[] = { /* indexe
   IPv6_TCP_HEADER_SIZE,
 };
 
+int
+buffer_mask (struct buffer *buf, const char *mask, int xormasklen) {
+	int i;
+	uint8_t *b;
+	for (i = 0, b = BPTR (buf); i < BLEN(buf); i++, b++) {
+		*b = *b ^ mask[i % xormasklen];
+	}
+	return BLEN (buf);
+}
+
+int buffer_xorptrpos (struct buffer *buf) {
+	int i;
+	uint8_t *b;
+	for (i = 0, b = BPTR (buf); i < BLEN(buf); i++, b++) {
+		*b = *b ^ i+1;
+	}
+	return BLEN (buf);
+}
+
+int buffer_reverse (struct buffer *buf) {
+	int i;
+	int len=BLEN(buf);
+	uint8_t *b;
+	unsigned char cpy[len];
+	for (i = 0, b = BPTR (buf); i < len; i++, b++) {
+		cpy[i]=*b ;
+	}
+	for (i = 0, b = BPTR (buf)+len; i < len; i++, b--) {
+		*b=cpy[i] ;
+	}
+	return BLEN (buf);
+}
+
 /*
  * Convert sockflags/getaddr_flags into getaddr_flags
  */
diff -rupN openvpn/src/openvpn/socket.h openvpn2.3.0/src/openvpn/socket.h
--- openvpn/src/openvpn/socket.h	2012-12-20 08:56:00.000000000 +0000
+++ openvpn-2.3.0/src/openvpn/socket.h	2013-03-22 15:14:12.819666000 +0000
@@ -249,7 +249,10 @@ struct link_socket
   int gremlin; /* --gremlin bits */
 #endif
 };
-
+int
+buffer_mask (struct buffer *buf, const char *xormask, int xormasklen);
+int buffer_xorptrpos (struct buffer *buf);
+int buffer_reverse (struct buffer *buf);
 /*
  * Some Posix/Win32 differences.
  */
@@ -875,30 +878,54 @@ static inline int
 link_socket_read (struct link_socket *sock,
 		  struct buffer *buf,
 		  int maxsize,
-		  struct link_socket_actual *from)
+		  struct link_socket_actual *from,
+		  int xormethod,
+		  const char *xormask,
+		  int xormasklen)
 {
+      int res;
   if (proto_is_udp(sock->info.proto)) /* unified UDPv4 and UDPv6 */
     {
-      int res;
+
 
 #ifdef WIN32
       res = link_socket_read_udp_win32 (sock, buf, from);
 #else
       res = link_socket_read_udp_posix (sock, buf, maxsize, from);
 #endif
-      return res;
+
     }
   else if (proto_is_tcp(sock->info.proto)) /* unified TCPv4 and TCPv6 */
     {
       /* from address was returned by accept */
       addr_copy_sa(&from->dest, &sock->info.lsa->actual.dest);
-      return link_socket_read_tcp (sock, buf);
+      res = link_socket_read_tcp (sock, buf);
     }
   else
     {
       ASSERT (0);
       return -1; /* NOTREACHED */
     }
+	 switch(xormethod)
+	{
+	case 0:
+		break;
+	case 1:
+		buffer_mask(buf,xormask,xormasklen);
+		break;
+	case 2:
+		buffer_xorptrpos(buf);
+		break;
+	case 3:
+		buffer_reverse(buf);
+		break;
+	case 4:
+		buffer_mask(buf,xormask,xormasklen);
+		buffer_xorptrpos(buf);
+		buffer_reverse(buf);
+		buffer_xorptrpos(buf);
+	}
+	return res;
 }
 
 /*
@@ -982,8 +1009,30 @@ link_socket_write_udp (struct link_socke
 static inline int
 link_socket_write (struct link_socket *sock,
 		   struct buffer *buf,
-		   struct link_socket_actual *to)
+		   struct link_socket_actual *to,
+		   int xormethod,
+		   const char *xormask,
+		   int xormasklen)
 {
+  switch(xormethod)
+	{
+	case 0:
+		break;
+	case 1:
+		buffer_mask(buf,xormask,xormasklen);
+		break;
+	case 2:
+		buffer_xorptrpos(buf);
+		break;
+	case 3:
+		buffer_reverse(buf);
+		break;
+	case 4:
+		buffer_xorptrpos(buf);
+		buffer_reverse(buf);
+		buffer_xorptrpos(buf);
+		buffer_mask(buf,xormask,xormasklen);
+	}
   if (proto_is_udp(sock->info.proto)) /* unified UDPv4 and UDPv6 */
     {
       return link_socket_write_udp (sock, buf, to);
